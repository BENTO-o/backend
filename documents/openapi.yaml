openapi: 3.0.0
info:
  title: Bento API
  description: API documentation for the Bento site user management system
  version: 1.0.0
servers:
  - url: https://stg.bento-o.site
    description: Secure server (HTTPS)
  - url: http://stg.bento-o.site
    description: Insecure server (HTTP for local testing)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, but clarifies the token type.

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Registers a new user in the system.
      operationId: postUserRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "이땡땡"
                email:
                  type: string
                  format: email
                  example: "eflnwkfew@naver.com"
                password:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
              required:
                - username
                - email
                - password
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
                  email: "Email is mandatory"
                  password: "Password should be between 8 and 20 characters"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  username: "The username '%s' is already in use. Please select a different username."
                  email: "An account with the email '%s' already exists. Please choose another email."
  /users/login:
    post:
      tags:
        - Users
      summary: Login
      description: Login to the system with email and password.
      operationId: postUserLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "eflnwkfew@naver.com"
                password:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
              required:
                - email
                - password
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzUxMiJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOi..."
                  tokenType:
                    type: string
                    example: "Bearer"
                  expiresIn:
                    type: integer
                    example: 3600
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
                  email: "Email is mandatory"
                  password: "Password should be between 8 and 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication failed: Invalid credentials provided."
  /users/logout:
    post:
      tags:
        - Users
      summary: Logout
      description: Logs out the authenticated user.
      operationId: postUserLogout
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOi"
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/logout-all:
    post:
      tags:
        - Users
      summary: Logout all devices
      description: Logs out the authenticated user from all devices.
      operationId: postUserLogoutAll
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  example: "eyJhbGciOi..."
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/refresh:
    post:
      tags:
        - Users
      summary: Refresh token
      description: Refreshes the access token using the refresh token.
      operationId: postUserRefresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOi..."
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzUxMiJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOi..."
                  tokenType:
                    type: string
                    example: "Bearer"
                  expiresIn:
                    type: integer
                    example: 3600
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user information
      description: Retrieves the authenticated user's information using a valid JWT token.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        200:
          description: A user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "이땡땡"
                  email:
                    type: string
                    example: "eflnwkfew@naver.com"
                  role:
                    type: string
                    enum: [ "ROLE_USER", "ROLE_ADMIN" ]
                  oauth_provider_id:
                    type: string
                    example: "xgV3Wue29fhU4HK99xYwNg=="
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
    patch:
      tags:
        - Users
      summary: Update current user's information
      description: Partially updates the authenticated user's information.
      operationId: patchUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "이점점"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
    delete:
      tags:
        - Users
      summary: Delete current user
      description: Deletes the authenticated user from the system.
      operationId: deleteUserProfile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deactivated successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/me/password:
    put:
      tags:
        - Users
      summary: Change user password
      description: Updates the password for the authenticated user.
      operationId: putUserPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
                newPassword:
                  type: string
                  format: password
                  example: "sfnksjfbnksf"
              required:
                - currentPassword
                - newPassword
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  currentPassword: "Password should be between 8 and 20 characters"
                  newPassword: "Password should be between 8 and 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/request-password-reset:
    post:
      tags:
        - Users
      summary: Request password reset
      description: Requests a password reset email for a user.
      operationId: postUserPasswordResetRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "mlice1030@naver.com"
      responses:
        200:
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email sent for password reset"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is mandatory"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No user found associated with the provided email address : "
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to send email"
  /users/reset-password/verify:
    post:
      tags:
        - Users
      summary: Verify password reset token
      description: Verifies the password reset token sent to the user's email.
      operationId: postUserPasswordResetVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzUxMiJ9..."
              required:
                - token
      responses:
        200:
          description: Token verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset token verified"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is invalid or expired"
  /users/reset-password:
    post:
      tags:
        - Users
      summary: Reset password
      description: Resets the password for the user after verifying the token.
      operationId: postUserPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzUxMiJ9..."
                newPassword:
                  type: string
                  format: password
                  example: "sfnksjfbnksf"
              required:
                - token
                - newPassword
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is invalid or expired"
  /notes:
    get:
      tags:
        - Notes
      summary: Get all notes
      description: Retrieves all notes in the system.
      operationId: getNotes
      responses:
        200:
          description: A list of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    note_id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "My first note"
                    folder:
                      type: string
                      example: "deep learning"
                    created_at:
                      type: string
                      format: date-time
                      example: "2021-10-01 12:00:00"
                    duration:
                      type: string
                      example: "01:00:00"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
    post:
      tags:
        - Notes
      summary: Create a new note
      description: Creates a new note in the system.
      operationId: postNote
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "test title"
                folder:
                  type: string
                  example: "deep-learning"
                file:
                  type: string
                  format: binary
                  description: The file to be uploaded.
                bookmarks:
                  type: array
                  items:
                    type: object
                  description: Optional list of bookmarks in JSON format.
                  example: [{"timestamp":"00:22:33"},{"timestamp":"00:22:34"}]
                  nullable: true
                memos:
                  type: array
                  items:
                    type: object
                  description: Optional list of memos in JSON format.
                  example: [{"timestamp":"00:22:33","text":"메모1"},{"timestamp":"00:22:34","text":"메모2"}]
                  nullable: true
      responses:
        201:
          description: Note created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Note created successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  title: "Title is mandatory"
                  folder: "Folder is mandatory"
  /notes/search:
    get:
      tags:
        - Notes
      summary: Search notes
      description: Searches notes in the system based on the provided query, date range, or other criteria.
      operationId: searchNotes
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
          description: Text to search for within the notes' content or title.
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-01"
          description: Start date of the search range in `yyyy-MM-dd` format.
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date
            example: "2024-12-03"
          description: End date of the search range in `yyyy-MM-dd` format.
      responses:
        200:
          description: A list of notes matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    noteId:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "My first note"
                    folder:
                      type: string
                      example: "deep learning"
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-12-03 03:19:32"
                    duration:
                      type: string
                      example: "01:00:00"
                    matches:
                      type: array
                      items:
                        type: object
                        properties:
                          text:
                            type: string
                            example: "Example matching text"
                          timestamp:
                            type: string
                            format: time
                            example: "00:00:41"
        400:
          description: Bad Request - Invalid parameters or date formats.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided date format is invalid. Please provide a valid date in the format yyyy-MM-dd."
        401:
          description: Unauthorized - Invalid authentication token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
        404:
          description: No notes found matching the criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No notes found for the specified criteria."
  /notes/{noteId}:
    get:
      tags:
        - Notes
      summary: Get note details
      description: Retrieves details of a specific note by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Note details
          content:
            application/json:
              schema:
                type: object
                properties:
                  noteId:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "My Note"
                  folder:
                    type: string
                    example: "My Folder"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2021-10-01 12:00:00"
                  duration:
                    type: string
                    example: "01:00:00"
                  content:
                    type: object
                    properties:
                      script:
                        type: array
                        items:
                          type: object
                          properties:
                            text:
                              type: string
                              example: "Script 1"
                            speaker:
                              type: string
                              example: "Speaker 1"
                            timestamp:
                              type: string
                              example: "00:00:00"
                      speaker:
                        type: array
                        items:
                          type: string
                        example:
                          - "Speaker 1"
                          - "Speaker 2"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "Note not found"
    delete:
      tags:
        - Notes
      summary: Delete a note
      description: Deletes a specific note by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Note deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Note deleted successfully"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "Note not found"
    patch:
      tags:
        - Notes
      summary: Update a note
      description: Updates the details of a specific note by its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Title"
                folderName:
                  type: string
                  example: "new folder"
      responses:
        200:
          description: Note updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Note updated successfully"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "Note not found"
  /notes/folders:
    get:
      tags:
        - Notes
      summary: Get all folders
      description: Retrieves a list of folders for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of folders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    folder_id:
                      type: integer
                      example: 1
                    folderName:
                      type: string
                      example: "deep learning"
    post:
      tags:
        - Notes
      summary: Create a new folder
      description: Creates a new folder in the system.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folderName:
                  type: string
                  example: "New Folder name"
      responses:
        201:
          description: Note created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Folder created successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "Folder already exists || Folder name is required"
  /notes/folders/{folderId}:
    get:
      tags:
        - Notes
      summary: Get notes by folder
      description: Retrieves notes within a specific folder for the authenticated user.
      security:
        - bearerAuth: []
      parameters:
        - name: folderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A list of notes in the folder
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    note_id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: "My first note"
                    folder:
                      type: string
                      example: "deep learning"
                    created_at:
                      type: string
                      format: date-time
                      example: "2021-10-01 12:00:00"
                    duration:
                      type: string
                      example: "01:00:00"
  /notes/{noteId}/ai-summary:
    get:
      tags:
        - Notes
      summary: Get AI-generated summary
      description: Retrieves an AI-generated summary for the specified note.
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: AI summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    example: "This is a summary of the note."
  /notes/download/{fileName}:
    get:
      tags:
        - Notes
      summary: Download a file
      description: (테스트용 API) Downloads a file associated with a note by its filename.
      security:
        - bearerAuth: []
      parameters:
        - name: fileName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "File not found or unreadable"
  /bookmarks:
    post:
      tags:
        - Bookmarks
      summary: Create a bookmark
      description: Creates a bookmark for a note.
      operationId: createBookmark
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                noteId:
                  type: integer
                  example: 1
                timestamp:
                  type: string
                  example: "00:00:00"
      responses:
        201:
          description: Bookmark created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Bookmark created successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  noteId: "Note ID is mandatory"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to create a bookmark for this note."
  /bookmarks/note/{noteId}:
    get:
      tags:
        - Bookmarks
      summary: Get bookmarks by note ID
      description: Retrieves bookmarks for a specific note.
      operationId: getBookmarksByNoteId
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A list of bookmarks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    bookmark_id:
                      type: integer
                      example: 1
                    note_id:
                      type: integer
                      example: 1
                    timestamp:
                      type: string
                      example: "00:00:00"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to view bookmarks for this note."
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No bookmarks found for the note."
  /bookmarks/{bookmarkId}:
    delete:
      tags:
        - Bookmarks
      summary: Delete a bookmark
      description: Deletes a bookmark by its ID.
      operationId: deleteBookmark
      security:
        - bearerAuth: []
      parameters:
        - name: bookmarkId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Bookmark deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Bookmark deleted successfully"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this bookmark."
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bookmark not found"
  /memos:
    post:
      tags:
        - Memos
      summary: Create a memo
      description: Creates a memo for a note.
      operationId: createMemo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                noteId:
                  type: integer
                  example: 1
                timestamp:
                  type: string
                  example: "00:00:00"
                text:
                  type: string
                  example: "This is a memo"
      responses:
        201:
          description: Memo created successfully
          content:
            application/json:
              schema:
                type: string
                example: "Memo created successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  noteId: "Note ID is mandatory"

  /memos/note/{noteId}:
    get:
      tags:
        - Memos
      summary: Get memos by note ID
      description: Retrieves memos for a specific note.
      operationId: getMemosByNoteId
      security:
        - bearerAuth: []
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A list of memos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    memo_id:
                      type: integer
                      example: 1
                    note_id:
                      type: integer
                      example: 1
                    timestamp:
                      type: string
                      example: "00:00:00"
                    text:
                      type: string
                      example: "This is a memo"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to view memos for this note."
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No memos found for the note."
  /memos/{memoId}:
    patch:
      tags:
        - Memos
      summary: Update a memo
      description: Updates a memo by its ID.
      operationId: updateMemo
      security:
        - bearerAuth: []
      parameters:
        - name: memoId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                noteId:
                  type: integer
                  example: 1
                timestamp:
                  type: string
                  example: "00:00:00"
                text:
                  type: string
                  example: "This is an updated memo"
      responses:
        200:
          description: Memo updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "Memo updated successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  noteId: "Note ID is mandatory"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this memo."

    delete:
      tags:
        - Memos
      summary: Delete a memo
      description: Deletes a memo by its ID.
      operationId: deleteMemo
      security:
        - bearerAuth: []
      parameters:
        - name: memoId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Memo deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Memo deleted successfully"
        400:
          description: validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  message: "Memo not found"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this memo."