openapi: 3.0.0
info:
  title: Bento API
  description: API documentation for the Bento site user management system
  version: 1.0.0
servers:
  - url: https://bento-o.site
    description: Secure server (HTTPS)
  - url: http://bento-o.site
    description: Insecure server (HTTP for local testing)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, but clarifies the token type.

paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Registers a new user in the system.
      operationId: postUserRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "이땡땡"
                email:
                  type: string
                  format: email
                  example: "eflnwkfew@naver.com"
                password:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
              required:
                - username
                - email
                - password
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
                  email: "Email is mandatory"
                  password: "Password should be between 8 and 20 characters"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  username: "The username '%s' is already in use. Please select a different username."
                  email: "An account with the email '%s' already exists. Please choose another email."
  /users/login:
    post:
      tags:
        - Users
      summary: Login
      description: Login to the system with email and password.
      operationId: postUserLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "eflnwkfew@naver.com"
                password:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
              required:
                - email
                - password
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzUxMiJ9..."
                  token_type:
                    type: string
                    example: "Bearer"
                  expires_in:
                    type: integer
                    example: 3600
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
                  email: "Email is mandatory"
                  password: "Password should be between 8 and 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication failed: Invalid credentials provided."
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user information
      description: Retrieves the authenticated user's information using a valid JWT token.
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        200:
          description: A user object
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "이땡땡"
                  email:
                    type: string
                    example: "eflnwkfew@naver.com"
                  role:
                    type: string
                    enum: [ "ROLE_USER", "ROLE_ADMIN" ]
                  oauth_provider_id:
                    type: string
                    example: "xgV3Wue29fhU4HK99xYwNg=="
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
    patch:
      tags:
        - Users
      summary: Update current user's information
      description: Partially updates the authenticated user's information.
      operationId: patchUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "이점점"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  username: "Username should be less than 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
    delete:
      tags:
        - Users
      summary: Delete current user
      description: Deletes the authenticated user from the system.
      operationId: deleteUserProfile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deactivated successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/me/password:
    put:
      tags:
        - Users
      summary: Change user password
      description: Updates the password for the authenticated user.
      operationId: putUserPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "fieubweiubdiuwe"
                newPassword:
                  type: string
                  format: password
                  example: "sfnksjfbnksf"
              required:
                - currentPassword
                - newPassword
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                example:
                  currentPassword: "Password should be between 8 and 20 characters"
                  newPassword: "Password should be between 8 and 20 characters"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The provided token is invalid. Please check and provide a valid token."
  /users/request-password-reset:
    post:
      tags:
        - Users
      summary: Request password reset
      description: Requests a password reset email for a user.
      operationId: postUserPasswordResetRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "mlice1030@naver.com"
      responses:
        200:
          description: Password reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email sent for password reset"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is mandatory"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No user found associated with the provided email address : "
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to send email"
  /users/reset-password/verify:
    post:
      tags:
        - Users
      summary: Verify password reset token
      description: Verifies the password reset token sent to the user's email.
      operationId: postUserPasswordResetVerify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzUxMiJ9..."
              required:
                - token
      responses:
        200:
          description: Token verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset token verified"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is invalid or expired"
  /users/reset-password:
    post:
      tags:
        - Users
      summary: Reset password
      description: Resets the password for the user after verifying the token.
      operationId: postUserPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzUxMiJ9..."
                newPassword:
                  type: string
                  format: password
                  example: "sfnksjfbnksf"
              required:
                - token
                - newPassword
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        400:
          description: Validation failed for the input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is invalid or expired"
